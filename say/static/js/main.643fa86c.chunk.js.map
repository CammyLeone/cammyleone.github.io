{"version":3,"sources":["../external \"Buttplug\"","chalk.png","Chalkboard.js","New.js","ChalkInput.js","LineWriter.js","../../src/ConnectAToy.js","../../src/useButtPlug.js","Vibration.js","../../src/useVibration.js","Assignment.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Buttplug","Chalkboard","styled","main","WritingArea","section","NotesArea","ChalkWriting","span","chalk","ChalkButton","button","Text","props","huge","large","normal","small","lineThrough","muted","Label","label","ChalkLink","a","New","useForm","register","handleSubmit","useState","url","setUrl","onSubmit","text","count","encoded","cashtag","btoa","qs","stringify","process","htmlFor","name","id","ref","rows","cols","defaultValue","type","href","role","aria-label","HiddenInput","input","onChange","value","inputRef","useRef","autoFocus","e","target","onClick","current","focus","LineWriter","onSuccessfulLine","onTypo","setText","initialized","initialize","ChalkInput","startsWith","DefaultClickToStart","initiateConnection","DefaultClickToStop","stopConnecting","DefaultConnected","ConnectAToy","clickToStart","clickToStop","connected","onNewDevice","ready","client","useEffect","connector","console","device","setDevice","setIsConnected","start","useButtPlug","isReady","setConnected","setReady","Vibration","max","level","startVibrate","stopVibrate","useVibration","d3","clamp","domain","range","scale","disabled","Lines","lines","map","idx","status","content","as","key","Instructions","Count","total","Math","Assignment","setLines","successfulCount","setSuccessfulCount","reverse","DefaultAssignment","AssignmentDecode","useParams","decoded","atob","assignment","parse","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.643fa86c.chunk.js","sourcesContent":["module.exports = Buttplug;","module.exports = __webpack_public_path__ + \"static/media/chalk.6f562c58.png\";","import styled from \"styled-components\";\nimport chalk from \"./chalk.png\";\n\nexport const Chalkboard = styled.main`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const WritingArea = styled.section`\n  height: 100vh;\n  overflow: scroll;\n  flex-grow: 3;\n  padding: 3rem;\n`;\n\nexport const NotesArea = styled.section`\n  width: 20%;\n  min-width: 300px;\n  border-left: 2px dotted #fff;\n  display: flex;\n  flex-direction: column;\n\n  & section {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    border-bottom: 2px dotted #fff;\n    &:last-of-type {\n      border-bottom: 0;\n    }\n  }\n`;\n\nexport const ChalkWriting = styled.span`\n  position: relative;\n  font-size: 4rem;\n\n  &::after {\n    content: \"\";\n    display: inline-block;\n    vertical-align: bottom;\n    height: 3rem;\n    width: 3rem;\n    background: url(${chalk});\n    background-size: contain;\n    background-repeat: no-repeat;\n  }\n`;\n\nexport const ChalkButton = styled.button`\n  font-family: \"Gloria Hallelujah\";\n  font-size: 2rem;\n  color: #fff;\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 1px solid #fff;\n  padding: 1rem;\n  border-radius: 0.25rem;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n\nexport const Text = styled.span`\n  font-size: ${(props) => {\n    if (props.huge) return \"4rem\";\n    if (props.large) return \"2rem\";\n    if (props.normal) return \"1rem\";\n    if (props.small) return \"0.5rem\";\n  }};\n  text-decoration: ${(props) => {\n    if (props.lineThrough) return \"line-through\";\n    return \"none\";\n  }};\n  color: ${(props) => {\n    if (props.muted) return \"rgba(255,255,255, 0.3);\";\n    return \"#FFF\";\n  }};\n`;\n","import React, { useState } from \"react\";\nimport qs from \"qs\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Text } from \"./Chalkboard\";\n\nconst URL_BASE = process.env.PUBLIC_URL;\n\nconst Label = styled.label`\n  display: block;\n`;\n\nconst ChalkLink = styled.a`\n  color: #e9658f;\n`;\n\nexport default function New() {\n  const { register, handleSubmit } = useForm();\n  const [url, setUrl] = useState(null);\n\n  const generateLink = ({ text, count, cashtag }) => {\n    const encoded = btoa(\n      qs.stringify({\n        text,\n        count,\n      })\n    );\n\n    // TODO this still doesn't put the # in the right place locally\n    setUrl(`${URL_BASE}/${encoded}`);\n  };\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit(generateLink)}>\n        <div>\n          <Label htmlFor=\"text\">Line they should write</Label>\n          <textarea\n            name=\"text\"\n            id=\"text\"\n            ref={register}\n            rows=\"5\"\n            cols=\"80\"\n            defaultValue=\"I deserve this.\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"count\">Number of times they should write it</Label>\n          <input\n            name=\"count\"\n            id=\"count\"\n            type=\"number\"\n            ref={register}\n            defaultValue={10}\n          />\n        </div>\n        {/* <div> */}\n        {/*   <Label htmlFor=\"cashtag\">Cashtag</Label> */}\n        {/*   <input name=\"cashtag\" id=\"cashtag\" type=\"text\" ref={register} /> */}\n        {/* </div> */}\n        <div>\n          <input type=\"submit\" />\n        </div>\n      </form>\n      {url && (\n        <section>\n          <Text large>\n            <ChalkLink href={url}>{url}</ChalkLink>\n          </Text>\n          <br />\n          <Text normal muted>\n            <span role=\"img\" aria-label=\"Link above\">\n              ☝️\n            </span>{\" \"}\n            send this link to your submissive\n          </Text>\n        </section>\n      )}\n    </main>\n  );\n}\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { ChalkWriting } from \"./Chalkboard\";\n\nconst HiddenInput = styled.input`\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n`;\n\nexport default function ({ onChange, value }) {\n  const inputRef = useRef(null);\n\n  return (\n    <div>\n      <HiddenInput\n        autoFocus\n        ref={inputRef}\n        value={value}\n        type=\"text\"\n        onChange={(e) => onChange(e.target.value)}\n      />\n      <ChalkWriting>\n        <span onClick={() => inputRef.current.focus()}>{value}</span>\n      </ChalkWriting>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Text } from \"./Chalkboard\";\nimport ChalkInput from \"./ChalkInput\";\n\nfunction LineWriter({ target, onSuccessfulLine, onTypo }) {\n  const [text, setText] = useState(\"\");\n  const [initialized, initialize] = useState(false);\n\n  function onChange(value) {\n    if (value === target) {\n      onSuccessfulLine();\n      setText(\"\");\n    } else if (!target.startsWith(value)) {\n      onTypo(value);\n      setText(\"\");\n    } else {\n      setText(value);\n    }\n  }\n\n  if (!initialized)\n    return (\n      <Text huge onClick={() => initialize(true)}>\n        Click here to start writing...\n      </Text>\n    );\n\n  return <ChalkInput type=\"text\" onChange={onChange} value={text} />;\n}\n\nexport default LineWriter;\n","import React, { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug\";\n\nconst DefaultClickToStart = ({ initiateConnection }) => (\n  <button onClick={initiateConnection}>Connect a Toy</button>\n);\nconst DefaultClickToStop = ({ stopConnecting }) => (\n  <button onClick={stopConnecting}>Stop Connecting</button>\n);\nconst DefaultConnected = () => <span>Connected!</span>;\n\nexport default function ConnectAToy({\n  clickToStart = DefaultClickToStart,\n  clickToStop = DefaultClickToStop,\n  connected = DefaultConnected,\n  onNewDevice,\n}) {\n  const [isReady, setReady] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n\n  useButtPlug(isReady, (device) => {\n    setConnected(true);\n    onNewDevice(device);\n  });\n\n  if (isConnected) return connected();\n  if (!isReady)\n    return clickToStart({ initiateConnection: () => setReady(true) });\n  if (isReady) return clickToStop({ stopConnecting: () => setReady(false) });\n  return null;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug(ready, onNewDevice) {\n  const client = useRef(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (client.current && !ready) {\n      client.current = null;\n    }\n    if (client.current || !ready) return;\n\n    client.current = new ButtplugClient(\"Cammy\");\n    client.current.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n      onNewDevice(device);\n    });\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.current.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.current.StartScanning();\n    }\n    start();\n  }, [ready]);\n\n  return { client, device, isConnected };\n}\n","import React, { useState } from \"react\";\nimport * as d3 from \"./d3-bundle\";\n\nimport { ConnectAToy, useVibration } from \"react-buttplug\";\nimport { ChalkButton } from \"./Chalkboard\";\n\nexport default function Vibration({ current, max }) {\n  const [device, setDevice] = useState(null);\n  const scale = d3.scaleLinear().clamp(true).domain([0, max]).range([0, 1]);\n  useVibration(device, scale(current));\n\n  return (\n    <ConnectAToy\n      onNewDevice={setDevice}\n      clickToStart={({ initiateConnection }) => (\n        <ChalkButton onClick={initiateConnection}>Connect Your Toy</ChalkButton>\n      )}\n      clickToStop={({ stopConnecting }) => (\n        <ChalkButton onClick={stopConnecting}>Stop Connecting</ChalkButton>\n      )}\n      connected={() => <ChalkButton disabled>Connected</ChalkButton>}\n    />\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useVibrate(device, level) {\n  useEffect(() => {\n    if (!device) return;\n\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      await device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${level}`);\n    if (level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [device, level]);\n\n  return null;\n}\n","import React, { useState, Fragment } from \"react\";\n\nimport LineWriter from \"./LineWriter\";\nimport Vibration from \"./Vibration\";\nimport { Chalkboard, WritingArea, NotesArea, Text } from \"./Chalkboard\";\n\nfunction Assignment({ text, count }) {\n  const [lines, setLines] = useState([]);\n  const [successfulCount, setSuccessfulCount] = useState(0);\n\n  return (\n    <Chalkboard>\n      <WritingArea>\n        <LineWriter\n          target={text}\n          onSuccessfulLine={() => {\n            setLines([...lines, { status: \"success\", content: text }]);\n            setSuccessfulCount(successfulCount + 1);\n          }}\n          onTypo={(content) => {\n            setLines([...lines, { status: \"typo\", content }]);\n            setSuccessfulCount(0);\n          }}\n        />\n        <Lines lines={[...lines].reverse()} />\n      </WritingArea>\n      <NotesArea>\n        <section>\n          <Instructions text={text} count={count} />\n        </section>\n        <section>\n          <Count current={successfulCount} total={count} />\n        </section>\n        <section>\n          <Vibration current={successfulCount} max={count} />\n        </section>\n      </NotesArea>\n    </Chalkboard>\n  );\n}\n\nconst Lines = ({ lines }) => (\n  <Fragment>\n    {lines.map(({ status, content }, idx) => (\n      <Text as=\"p\" large muted lineThrough={status === \"typo\"} key={idx}>\n        {content}\n      </Text>\n    ))}\n  </Fragment>\n);\n\nconst Instructions = ({ text, count }) => (\n  <Fragment>\n    <Text large>Assignment:</Text>\n    <Text normal>You are to write</Text>\n    <Text large>\"{text}\"</Text>\n    <Text normal>{count} times.</Text>\n  </Fragment>\n);\n\nconst Count = ({ current, total }) => (\n  <Fragment>\n    <Text normal> You have </Text>\n    <Text large>{Math.max(0, total - current)}</Text>\n    <Text normal>lines to go.</Text>\n  </Fragment>\n);\n\nexport default Assignment;\n","import React from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport qs from \"qs\";\n\nimport New from \"./New\";\nimport Assignment from \"./Assignment\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/new\" component={New} />\n      <Route path=\"/:encoded\" component={AssignmentDecode} />\n      <Route path=\"/\" component={DefaultAssignment} />\n    </Switch>\n  );\n}\n\nconst DefaultAssignment = () => (\n  <Assignment text=\"Mr. Grey is a True Dominant\" count={5} />\n);\n\nfunction AssignmentDecode() {\n  const { encoded } = useParams();\n  const decoded = atob(encoded);\n  const assignment = qs.parse(decoded);\n  return <Assignment text={assignment.text} count={assignment.count} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}