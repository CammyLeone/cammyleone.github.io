{"version":3,"sources":["../external \"Buttplug\"","assets/chalk.png","style/breakpoints.js","style/GlobalStyle.js","style/Chalkboard.js","New.js","LineWriter.js","../../src/ConnectAToy.js","../../src/useButtPlug.js","Vibration.js","../../src/useVibration.js","Assignment.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Buttplug","breakpointValues","breakpoints","mobile","mobileMax","tablet","tabletMax","desktop","media","mobileOnly","css","tabletOnly","tabletUp","createGlobalStyle","Text","styled","span","props","huge","large","normal","small","lineThrough","muted","error","success","attention","Chalkboard","main","WritingArea","section","InstructionAssignment","attrs","NotesArea","ChalkButton","chalk","button","Label","label","ChalkLink","a","Container","New","useForm","register","handleSubmit","useState","url","setUrl","onSubmit","text","count","encoded","cashtag","btoa","qs","stringify","process","htmlFor","name","id","ref","rows","cols","defaultValue","type","value","href","role","aria-label","ChalkInputText","textarea","LineWriter","target","onSuccessfulLine","onTypo","setText","initialized","initialize","autoFocus","placeholder","onChange","e","startsWith","length","DefaultClickToStart","initiateConnection","onClick","DefaultClickToStop","stopConnecting","DefaultConnected","ConnectAToy","clickToStart","clickToStop","connected","onNewDevice","ready","client","useRef","useEffect","connector","console","device","setDevice","setIsConnected","start","useButtPlug","isReady","setConnected","setReady","Vibration","current","max","level","startVibrate","stopVibrate","useVibration","d3","clamp","domain","range","scale","disabled","Lines","lines","map","idx","status","content","as","key","Instructions","Count","total","Math","Assignment","setLines","successfulCount","setSuccessfulCount","reverse","DefaultAssignment","AssignmentDecode","useParams","decoded","atob","assignment","parse","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6722df40.chunk.js","sourcesContent":["module.exports = Buttplug;","module.exports = __webpack_public_path__ + \"static/media/chalk.6f562c58.png\";","import { css } from \"styled-components\";\n\nexport const breakpointValues = {\n  mobile: 0,\n  tablet: 928,\n  desktop: 1200,\n};\n\nconst breakpoints = {\n  mobile: `min-width: ${breakpointValues.mobile}`,\n  mobileMax: `max-width: ${breakpointValues.tablet - 1}px`,\n  tablet: `min-width: ${breakpointValues.tablet}px`,\n  tabletMax: `max-width: ${breakpointValues.desktop - 1}px`,\n  desktop: `min-width: ${breakpointValues.desktop}px`,\n};\n\nconst media = {\n  mobileOnly: (...args) => css`\n    @media only screen and (${breakpoints.mobile}) and (${breakpoints.mobileMax}) {\n      ${css(...args)};\n    }\n  `,\n  tabletOnly: (...args) => css`\n    @media only screen and (${breakpoints.tablet}) and (${breakpoints.tabletMax}) {\n      ${css(...args)};\n    }\n  `,\n  tabletUp: (...args) => css`\n    @media only screen and (${breakpoints.tablet}) {\n      ${css(...args)};\n    }\n  `,\n  desktop: (...args) => css`\n    @media only screen and (${breakpoints.desktop}) {\n      ${css(...args)};\n    }\n  `,\n};\n\nexport default media;\n","import { createGlobalStyle } from \"styled-components\";\nimport media from \"./breakpoints\";\n\nexport default createGlobalStyle`\n  *, *:before, *:after {\n    box-sizing: border-box;\n  }\n\n  html {\n    background: url(https://raw.github.com/mmoustafa/Chalkboard/master/img/bg.png) repeat center center fixed;\n    font-size: 12px;\n    ${media.tabletUp`font-size: 16px`}\n  }\n\n  body {\n    margin: 0;\n    font: 16pt 'Gloria Hallelujah';\n    color: #FFF;\n    text-shadow: 0 0 4px rgba(255, 255, 255, 0.6);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`;\n","import styled from \"styled-components\";\nimport media from \"./breakpoints\";\nimport chalk from \"../assets/chalk.png\";\n\nexport const Text = styled.span`\n  font-size: ${(props) => {\n    if (props.huge) return \"4rem\";\n    if (props.large) return \"2rem\";\n    if (props.normal) return \"1.5rem\";\n    if (props.small) return \"0.5rem\";\n  }};\n  text-decoration: ${(props) => {\n    if (props.lineThrough) return \"line-through\";\n    return \"none\";\n  }};\n  color: ${(props) => {\n    if (props.muted) return \"rgba(255,255,255, 0.3);\";\n    if (props.error) return \"#FFBEA4\";\n    if (props.success) return \"#9CCCB8\";\n    if (props.attention) return \"#A189B5\";\n    return \"#FFF\";\n  }};\n`;\n\nexport const Chalkboard = styled.main`\n  display: flex;\n  flex-direction: column-reverse;\n  ${media.tabletUp`flex-direction: row;`}\n`;\n\nexport const WritingArea = styled.section`\n  height: 100vh;\n  overflow: scroll;\n  padding: 3rem;\n  flex-grow: 3;\n`;\n\nexport const InstructionAssignment = styled(Text).attrs(() => ({\n  large: true,\n  attention: true,\n}))`\n  word-break: break-word;\n  text-align: center;\n`;\n\nexport const NotesArea = styled.section`\n  ${media.tabletUp`\n    min-width: 12rem;\n    max-width: 18rem;\n\n    border-left: 2px dotted #fff;\n  `}\n\n  display: flex;\n  flex-direction: column;\n\n  & section {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    border-bottom: 2px dotted #fff;\n    ${media.tabletUp`\n      &:last-of-type {\n        border-bottom: 0;\n      }\n    `}\n  }\n`;\n\nexport const ChalkWriting = styled.span`\n  cursor: text;\n  position: relative;\n  word-break: break-all;\n  font-size: 4rem;\n\n  &::after {\n    content: \"\";\n    display: inline-block;\n    vertical-align: bottom;\n    height: 3rem;\n    width: 3rem;\n    background: url(${chalk});\n    background-size: contain;\n    background-repeat: no-repeat;\n  }\n`;\n\nexport const ChalkButton = styled.button`\n  font-family: \"Gloria Hallelujah\";\n  font-size: 2rem;\n  color: #fff;\n  background-color: rgba(255, 255, 255, 0.1);\n  border: 1px solid #fff;\n  padding: 1rem;\n  border-radius: 0.25rem;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  &:active {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n","import React, { useState } from \"react\";\nimport qs from \"qs\";\nimport styled from \"styled-components\";\nimport { useForm } from \"react-hook-form\";\n\nimport { Text } from \"./style/Chalkboard\";\n\nconst URL_BASE = process.env.REACT_APP_LINK_BASE;\n\nconst Label = styled.label`\n  display: block;\n`;\n\nconst ChalkLink = styled.a`\n  color: #e9658f;\n`;\n\nconst Container = styled.main`\n  padding: 2rem;\n`;\n\nexport default function New() {\n  const { register, handleSubmit } = useForm();\n  const [url, setUrl] = useState(null);\n\n  const generateLink = ({ text, count, cashtag }) => {\n    const encoded = btoa(\n      qs.stringify({\n        text,\n        count,\n      })\n    );\n\n    setUrl(`${URL_BASE}/${encoded}`);\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit(generateLink)}>\n        <div>\n          <Label htmlFor=\"text\">Line they should write</Label>\n          <textarea\n            name=\"text\"\n            id=\"text\"\n            ref={register}\n            rows=\"5\"\n            cols=\"80\"\n            defaultValue=\"I deserve this.\"\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"count\">Number of times they should write it</Label>\n          <input\n            name=\"count\"\n            id=\"count\"\n            type=\"number\"\n            ref={register}\n            defaultValue={10}\n          />\n        </div>\n        {/* <div> */}\n        {/*   <Label htmlFor=\"cashtag\">Cashtag</Label> */}\n        {/*   <input name=\"cashtag\" id=\"cashtag\" type=\"text\" ref={register} /> */}\n        {/* </div> */}\n        <div>\n          <input type=\"submit\" value=\"Generate a URL\" />\n        </div>\n      </form>\n      {url && (\n        <section>\n          <Text large>\n            <ChalkLink href={url}>{url}</ChalkLink>\n          </Text>\n          <br />\n          <Text normal muted>\n            <span role=\"img\" aria-label=\"Link above\">\n              ☝️\n            </span>{\" \"}\n            send this link to your submissive\n          </Text>\n        </section>\n      )}\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ChalkInputText = styled.textarea`\n  font-size: 4rem;\n  font-family: \"Gloria Hallelujah\";\n  color: #fff;\n  background: transparent;\n  width: 100%;\n\n  &:focus {\n    border: none;\n    outline: none;\n  }\n`;\n\nfunction LineWriter({ target, onSuccessfulLine, onTypo }) {\n  const [text, setText] = useState(\"\");\n  const [initialized, initialize] = useState(false);\n\n  function onChange(value) {\n    if (!initialized) initialize(true);\n\n    if (value === target) {\n      onSuccessfulLine();\n      setText(\"\");\n    } else if (target.startsWith(value) || value.length < 3) {\n      setText(value);\n    } else {\n      onTypo(value);\n      setText(\"\");\n    }\n  }\n\n  return (\n    <ChalkInputText\n      autoFocus\n      value={text}\n      type=\"text\"\n      placeholder={!initialized && \"Start writing here...\"}\n      onChange={(e) => onChange(e.target.value)}\n    />\n  );\n}\n\nexport default LineWriter;\n","import React, { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug\";\n\nconst DefaultClickToStart = ({ initiateConnection }) => (\n  <button onClick={initiateConnection}>Connect a Toy</button>\n);\nconst DefaultClickToStop = ({ stopConnecting }) => (\n  <button onClick={stopConnecting}>Stop Connecting</button>\n);\nconst DefaultConnected = () => <span>Connected!</span>;\n\nexport default function ConnectAToy({\n  clickToStart = DefaultClickToStart,\n  clickToStop = DefaultClickToStop,\n  connected = DefaultConnected,\n  onNewDevice,\n}) {\n  const [isReady, setReady] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n\n  useButtPlug(isReady, (device) => {\n    setConnected(true);\n    onNewDevice(device);\n  });\n\n  if (isConnected) return connected();\n  if (!isReady)\n    return clickToStart({ initiateConnection: () => setReady(true) });\n  if (isReady) return clickToStop({ stopConnecting: () => setReady(false) });\n  return null;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug(ready, onNewDevice) {\n  const client = useRef(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (client.current && !ready) {\n      client.current = null;\n    }\n    if (client.current || !ready) return;\n\n    client.current = new ButtplugClient(\"Cammy\");\n    client.current.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n      onNewDevice(device);\n    });\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.current.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.current.StartScanning();\n    }\n    start();\n  }, [ready]);\n\n  return { client, device, isConnected };\n}\n","import React, { useState } from \"react\";\nimport * as d3 from \"./d3-bundle\";\n\nimport { ConnectAToy, useVibration } from \"react-buttplug\";\nimport { ChalkButton } from \"./style/Chalkboard\";\n\nexport default function Vibration({ current, max }) {\n  const [device, setDevice] = useState(null);\n  const scale = d3.scaleLinear().clamp(true).domain([0, max]).range([0, 1]);\n  useVibration(device, scale(current));\n\n  return (\n    <ConnectAToy\n      onNewDevice={setDevice}\n      clickToStart={({ initiateConnection }) => (\n        <ChalkButton onClick={initiateConnection}>Connect Your Toy</ChalkButton>\n      )}\n      clickToStop={({ stopConnecting }) => (\n        <ChalkButton onClick={stopConnecting}>Stop Connecting</ChalkButton>\n      )}\n      connected={() => <ChalkButton disabled>Connected</ChalkButton>}\n    />\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useVibrate(device, level) {\n  useEffect(() => {\n    if (!device) return;\n\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${level}`);\n    if (level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [device, level]);\n\n  return null;\n}\n","import React, { useState, Fragment } from \"react\";\n\nimport LineWriter from \"./LineWriter\";\nimport Vibration from \"./Vibration\";\nimport {\n  Chalkboard,\n  WritingArea,\n  NotesArea,\n  Text,\n  InstructionAssignment,\n} from \"./style/Chalkboard\";\n\nfunction Assignment({ text, count }) {\n  const [lines, setLines] = useState([]);\n  const [successfulCount, setSuccessfulCount] = useState(0);\n\n  return (\n    <Chalkboard>\n      <WritingArea>\n        <LineWriter\n          target={text}\n          onSuccessfulLine={() => {\n            setLines([...lines, { status: \"success\", content: text }]);\n            setSuccessfulCount(successfulCount + 1);\n          }}\n          onTypo={(content) => {\n            setLines([...lines, { status: \"typo\", content }]);\n            setSuccessfulCount(0);\n          }}\n        />\n        <Lines lines={[...lines].reverse()} />\n      </WritingArea>\n      <NotesArea>\n        <section>\n          <Instructions text={text} count={count} />\n        </section>\n        <section>\n          <Count current={successfulCount} total={count} />\n        </section>\n        <section>\n          <Vibration current={successfulCount} max={count} />\n        </section>\n      </NotesArea>\n    </Chalkboard>\n  );\n}\n\nconst Lines = ({ lines }) => (\n  <Fragment>\n    {lines.map(({ status, content }, idx) => (\n      <Text\n        as=\"p\"\n        large\n        success={status === \"success\"}\n        error={status === \"typo\"}\n        lineThrough={status === \"typo\"}\n        key={idx}\n      >\n        {content}\n      </Text>\n    ))}\n  </Fragment>\n);\n\nconst Instructions = ({ text, count }) => (\n  <Fragment>\n    <Text large>Assignment:</Text>\n    <Text normal>You are to write</Text>\n    <InstructionAssignment>\"{text}\"</InstructionAssignment>\n    <Text normal>{count} times.</Text>\n  </Fragment>\n);\n\nconst Count = ({ current, total }) => (\n  <Fragment>\n    <Text normal> You have </Text>\n    <Text large attention>\n      {Math.max(0, total - current)}\n    </Text>\n    <Text normal>lines to go.</Text>\n  </Fragment>\n);\n\nexport default Assignment;\n","import React from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport qs from \"qs\";\n\nimport New from \"./New\";\nimport Assignment from \"./Assignment\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/new\" component={New} />\n      <Route path=\"/:encoded\" component={AssignmentDecode} />\n      <Route path=\"/\" component={DefaultAssignment} />\n    </Switch>\n  );\n}\n\nconst DefaultAssignment = () => (\n  <Assignment text=\"Mr. Grey is a True Dominant\" count={5} />\n);\n\nfunction AssignmentDecode() {\n  const { encoded } = useParams();\n  const decoded = atob(encoded);\n  const assignment = qs.parse(decoded);\n  return <Assignment text={assignment.text} count={assignment.count} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./style/index.css\";\nimport GlobalStyle from \"./style/GlobalStyle\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <GlobalStyle />\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}