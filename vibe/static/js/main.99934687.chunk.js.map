{"version":3,"sources":["../external \"Buttplug\"","layout/Chip.js","layout/Section.js","layout/font.js","layout/Container.js","features/share/shareSlice.js","features/share/Others.js","../../src/ConnectAToy.js","../../src/useButtPlug.js","getClientId.js","features/share/Me.js","../../src/useVibration.js","features/share/Share.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Buttplug","Chip","styled","div","themeAttention","css","Section","section","props","attention","padded","SectionButton","button","font","large","medium","small","Text","Large","span","Medium","Small","Container","shareSlice","createSlice","name","initialState","me","group","locks","clients","reducers","setMe","state","id","payload","newSession","setFromServer","actions","clientConnected","createAction","clientDeviceState","clientVibration","selectMe","share","selectOthers","Object","keys","filter","map","Others","others","useSelector","dispatch","useDispatch","other","idx","Other","key","setIntensity","i","intensity","hasDevice","DeviceControl","type","min","max","step","value","onChange","e","Number","target","onFocus","console","log","onBlur","DefaultClickToStart","initiateConnection","onClick","DefaultClickToStop","stopConnecting","DefaultConnected","ConnectAToy","clickToStart","clickToStop","connected","onNewDevice","useState","ready","client","useRef","useEffect","a","connector","device","setDevice","setIsConnected","start","useButtPlug","isReady","setConnected","setReady","getClientId","localStorage","getItem","uuid","setItem","Me","ConnectedMe","NewMe","onJoin","join","newDevice","useCallback","d","current","level","startVibrate","stopVibrate","useVibration","setName","onSubmit","preventDefault","placeholder","Share","useParams","fetch","process","response","json","data","App","path","component","socket","io","socketIoMiddleware","createSocketIoMiddleware","configureStore","reducer","shareReducer","middleware","getDefaultMiddleware","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.99934687.chunk.js","sourcesContent":["module.exports = Buttplug;","import styled from \"styled-components\";\n\nexport const Chip = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n  &:hover {\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  }\n`;\n","import styled, { css } from \"styled-components\";\n\nconst themeAttention = css`\n  background-color: pink;\n  color: white;\n`;\n\nexport const Section = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 1px solid #000;\n  &:last-of-type {\n    border-bottom: 0;\n  }\n  ${(props) => props.attention && themeAttention}\n  ${(props) => props.padded && `padding: 1rem`}\n`;\n\nexport const SectionButton = styled.button`\n  ${themeAttention}\n  width: 100%;\n  border: 0;\n  padding: 1rem;\n`;\n","import styled, { css } from \"styled-components\";\n\nexport const font = {\n  large: css`\n    font-size: 1.5rem;\n  `,\n  medium: css`\n    font-size: 1rem;\n  `,\n  small: css`\n    font-size: 0.5rem;\n  `,\n};\n\nexport const Text = {\n  Large: styled.span`\n    ${font.large}\n  `,\n  Medium: styled.span`\n    ${font.medium}\n  `,\n  Small: styled.span`\n    ${font.small}\n  `,\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 2rem;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 1rem;\n`;\n","import { createSlice, createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const shareSlice = createSlice({\r\n  name: \"share\",\r\n  initialState: {\r\n    me: null,\r\n    group: null,\r\n    locks: {},\r\n    clients: {},\r\n  },\r\n  reducers: {\r\n    setMe: (state, { payload: { id } }) => {\r\n      state.me = id;\r\n    },\r\n    newSession: (state, { payload }) => {\r\n      state.group = payload;\r\n    },\r\n    setFromServer: (state, { payload }) => {\r\n      state.locks = payload.locks;\r\n      state.clients = payload.clients;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setMe, newSession } = shareSlice.actions;\r\n\r\nexport const lockAcquired = createAction(\"share/lockAcquired\");\r\nexport const lockReleased = createAction(\"share/lockReleased\");\r\nexport const clientConnected = createAction(\"share/clientConnected\");\r\nexport const clientDeviceState = createAction(\"share/clientDeviceState\");\r\nexport const clientVibration = createAction(\"share/clientVibration\");\r\n\r\nconst { setFromServer } = shareSlice.actions;\r\nexport const initFromServer = () => async (dispatch) => {\r\n  const response = await fetch(`${API_URL}/hydrate`);\r\n  const data = await response.json();\r\n  dispatch(setFromServer(data));\r\n};\r\n\r\nexport const join = ({ id, name }) => (dispatch) => {\r\n  dispatch(setMe({ id }));\r\n  dispatch(clientConnected({ id, name }));\r\n};\r\n\r\nexport const selectMe = (state) => state.share.clients[state.share.me];\r\nexport const selectOthers = (state) =>\r\n  Object.keys(state.share.clients)\r\n    .filter((id) => id !== state.share.me)\r\n    .map((id) => state.share.clients[id]);\r\n\r\nexport default shareSlice.reducer;\r\n","import React, { Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { selectOthers, clientVibration } from \"./shareSlice\";\nimport { Chip, Section, Text } from \"../../layout\";\n\nexport default function Others() {\n  const others = useSelector(selectOthers);\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      {others.map((other, idx) => (\n        <Other\n          key={idx}\n          other={other}\n          setIntensity={(i) =>\n            dispatch(clientVibration({ id: other.id, intensity: i }))\n          }\n        />\n      ))}\n    </Fragment>\n  );\n}\n\nexport function Other({ other, setIntensity }) {\n  const { name, hasDevice, intensity } = other;\n\n  return (\n    <Chip>\n      <Section padded>\n        <Text.Large>{name}</Text.Large>\n      </Section>\n      <DeviceControl\n        hasDevice={hasDevice}\n        intensity={intensity}\n        setIntensity={setIntensity}\n      />\n    </Chip>\n  );\n}\n\nfunction DeviceControl({ hasDevice, intensity, setIntensity }) {\n  if (!hasDevice) {\n    return (\n      <Section padded attention>\n        <Text.Medium>No Device</Text.Medium>\n      </Section>\n    );\n  }\n\n  return (\n    <Section padded attention>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"0.9\"\n        step=\"0.1\"\n        value={intensity}\n        onChange={(e) => setIntensity(Number(e.target.value))}\n        onFocus={() => console.log(\"onFocus\")}\n        onBlur={() => console.log(\"onBlur\")}\n      />\n    </Section>\n  );\n}\n","import React, { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug\";\n\nconst DefaultClickToStart = ({ initiateConnection }) => (\n  <button onClick={initiateConnection}>Connect a Toy</button>\n);\nconst DefaultClickToStop = ({ stopConnecting }) => (\n  <button onClick={stopConnecting}>Stop Connecting</button>\n);\nconst DefaultConnected = () => <span>Connected!</span>;\n\nexport default function ConnectAToy({\n  clickToStart = DefaultClickToStart,\n  clickToStop = DefaultClickToStop,\n  connected = DefaultConnected,\n  onNewDevice,\n}) {\n  const [isReady, setReady] = useState(false);\n  const [isConnected, setConnected] = useState(false);\n\n  useButtPlug(isReady, (device) => {\n    setConnected(true);\n    onNewDevice(device);\n  });\n\n  if (isConnected) return connected();\n  if (!isReady)\n    return clickToStart({ initiateConnection: () => setReady(true) });\n  if (isReady) return clickToStop({ stopConnecting: () => setReady(false) });\n  return null;\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug(ready, onNewDevice) {\n  const client = useRef(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (client.current && !ready) {\n      client.current = null;\n    }\n    if (client.current || !ready) return;\n\n    client.current = new ButtplugClient(\"Cammy\");\n    client.current.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n      onNewDevice(device);\n    });\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.current.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.current.StartScanning();\n    }\n    start();\n  }, [ready]);\n\n  return { client, device, isConnected };\n}\n","import * as uuid from \"uuid\";\n\nexport default function getClientId() {\n  let id = localStorage.getItem(\"clientId\");\n  if (id) return id;\n\n  id = uuid.v4();\n  localStorage.setItem(\"clientId\", id);\n  return id;\n}\n","import React, { useState, useRef, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ConnectAToy, useVibration } from \"react-buttplug\";\nimport { Chip, Section, SectionButton, Text } from \"../../layout\";\n\nimport getClientId from \"../../getClientId\";\nimport { selectMe, join, clientDeviceState } from \"./shareSlice\";\n\nexport default function Me() {\n  const dispatch = useDispatch();\n  const me = useSelector(selectMe);\n\n  if (!me)\n    return (\n      <NewMe onJoin={(name) => dispatch(join({ id: getClientId(), name }))} />\n    );\n\n  return <ConnectedMe me={me} />;\n}\n\nfunction ConnectedMe({ me }) {\n  const { id, name, intensity } = me;\n  const dispatch = useDispatch();\n  const device = useRef(null);\n\n  const newDevice = useCallback(\n    (d) => {\n      device.current = d;\n      dispatch(clientDeviceState({ id, hasDevice: true }));\n    },\n    [id, dispatch]\n  );\n  useVibration(device.current, intensity);\n\n  return (\n    <Chip>\n      <Section padded>\n        <Text.Large>{name}</Text.Large>\n      </Section>\n      <ConnectAToy\n        onNewDevice={newDevice}\n        clickToStart={({ initiateConnection }) => (\n          <Section>\n            <SectionButton onClick={initiateConnection}>\n              Connect My Toy\n            </SectionButton>\n          </Section>\n        )}\n        clickToStop={({ stopConnecting }) => (\n          <Section>\n            <SectionButton onClick={stopConnecting}>\n              Stop Connecting\n            </SectionButton>\n          </Section>\n        )}\n        connected={() => (\n          <Section attention padded>\n            <Text.Medium>Connected!</Text.Medium>\n          </Section>\n        )}\n      />\n    </Chip>\n  );\n}\n\nfunction NewMe({ onJoin }) {\n  const [name, setName] = useState(\"\");\n\n  const joinVibe = (e) => {\n    onJoin(name);\n    e.preventDefault();\n  };\n\n  return (\n    <Chip>\n      <Section padded>\n        <form onSubmit={joinVibe}>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"Name\"\n          />\n          <button type=\"submit\">Join</button>\n        </form>\n      </Section>\n    </Chip>\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useVibrate(device, level) {\n  useEffect(() => {\n    if (!device) return;\n\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      await device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${level}`);\n    if (level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [device, level]);\n\n  return null;\n}\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Container } from \"../../layout\";\r\nimport Others from \"./Others\";\r\nimport Me from \"./Me\";\r\nimport { newSession, initFromServer } from \"./shareSlice\";\r\n\r\nexport function Share() {\r\n  const { group } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(newSession(group));\r\n    dispatch(initFromServer());\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Me />\r\n      <Others />\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Share } from \"./features/share/Share\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/:group\" component={Share} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSocketIoMiddleware from \"redux-socket.io\";\r\nimport io from \"socket.io-client\";\r\nimport shareReducer from \"../features/share/shareSlice\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nlet socket = io(API_URL);\r\nlet socketIoMiddleware = createSocketIoMiddleware(socket, \"share/client\");\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    share: shareReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(socketIoMiddleware),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport \"normalize.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}