{"version":3,"sources":["../external \"Buttplug\"","features/share/shareSlice.js","features/share/Others.js","../../src/ConnectAToy.js","../../src/useButtPlug.js","getClientId.js","features/share/Me.js","../../src/useVibration.js","features/share/Share.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","Buttplug","shareSlice","createSlice","name","initialState","me","group","locks","clients","reducers","setMe","state","id","payload","newSession","setFromServer","actions","clientConnected","createAction","clientDisconnected","clientDeviceState","clientVibration","selectMe","share","selectOthers","Object","keys","filter","map","Others","others","useSelector","other","idx","Other","key","hasDevice","intensity","dispatch","useDispatch","type","min","max","step","value","onChange","e","Number","target","onFocus","console","log","onBlur","ConnectAToy","onNewDevice","useState","ready","useEffect","newClient","device","setDevice","setIsConnected","setClient","client","a","connector","start","useButtPlug","isReady","render","initiateConnection","setReady","getClientId","localStorage","getItem","uuid","setItem","Me","ConnectedMe","NewMe","useRef","newDevice","useCallback","d","current","level","startVibrate","stopVibrate","useVibration","onClick","setName","placeholder","join","Share","useParams","fetch","process","response","json","data","App","path","component","socket","io","socketIoMiddleware","createSocketIoMiddleware","configureStore","reducer","shareReducer","middleware","getDefaultMiddleware","concat","Boolean","window","location","hostname","match","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbb955ed.chunk.js","sourcesContent":["module.exports = Buttplug;","import { createSlice, createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const shareSlice = createSlice({\r\n  name: \"share\",\r\n  initialState: {\r\n    me: null,\r\n    group: null,\r\n    locks: {},\r\n    clients: {},\r\n  },\r\n  reducers: {\r\n    setMe: (state, { payload: { id } }) => {\r\n      state.me = id;\r\n    },\r\n    newSession: (state, { payload }) => {\r\n      state.group = payload;\r\n    },\r\n    setFromServer: (state, { payload }) => {\r\n      state.locks = payload.locks;\r\n      state.clients = payload.clients;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setMe, newSession } = shareSlice.actions;\r\n\r\nexport const lockAcquired = createAction(\"share/lockAcquired\");\r\nexport const lockReleased = createAction(\"share/lockReleased\");\r\nexport const clientConnected = createAction(\"share/clientConnected\");\r\nexport const clientDisconnected = createAction(\"share/clientDisconnected\");\r\nexport const clientDeviceState = createAction(\"share/clientDeviceState\");\r\nexport const clientVibration = createAction(\"share/clientVibration\");\r\n\r\nconst { setFromServer } = shareSlice.actions;\r\nexport const initFromServer = () => async (dispatch) => {\r\n  const response = await fetch(`${API_URL}/hydrate`);\r\n  const data = await response.json();\r\n  dispatch(setFromServer(data));\r\n};\r\n\r\nexport const join = ({ id, name }) => (dispatch) => {\r\n  dispatch(setMe({ id }));\r\n  dispatch(clientConnected({ id, name }));\r\n};\r\n\r\nexport const selectMe = (state) => state.share.clients[state.share.me];\r\nexport const selectOthers = (state) =>\r\n  Object.keys(state.share.clients)\r\n    .filter((id) => id !== state.share.me)\r\n    .map((id) => state.share.clients[id]);\r\n\r\nexport default shareSlice.reducer;\r\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { selectOthers, clientVibration } from \"./shareSlice\";\n\nexport default function Others() {\n  const others = useSelector(selectOthers);\n  return (\n    <div>\n      {others.map((other, idx) => (\n        <Other key={idx} other={other} />\n      ))}\n    </div>\n  );\n}\n\nexport function Other({ other }) {\n  const { id, name, hasDevice, intensity } = other;\n  const dispatch = useDispatch();\n\n  return (\n    <h1>\n      {name}, device: {hasDevice ? \"âœ“\" : \"ðŸš·\"}, intensity: {intensity}\n      {hasDevice && (\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"0.9\"\n          step=\"0.1\"\n          value={intensity}\n          onChange={(e) =>\n            dispatch(clientVibration({ id, intensity: Number(e.target.value) }))\n          }\n          onFocus={() => console.log(\"onFocus\")}\n          onBlur={() => console.log(\"onBlur\")}\n        />\n      )}\n    </h1>\n  );\n}\n","import { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug\";\n\nexport default function ConnectAToy({ render, onNewDevice }) {\n  const [isReady, setReady] = useState(false);\n\n  useButtPlug(isReady, onNewDevice);\n\n  if (!isReady) return render({ initiateConnection: () => setReady(true) });\n  return null;\n}\n","import { useState, useEffect } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug(ready, onNewDevice) {\n  const [client, setClient] = useState(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (!ready || client) return;\n\n    const newClient = new ButtplugClient(\"Cammy\");\n    newClient.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n      onNewDevice(device);\n    });\n\n    setClient(newClient);\n  }, [ready, onNewDevice, client, device, isConnected]);\n\n  useEffect(() => {\n    if (!client || isConnected) return;\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.StartScanning();\n    }\n    start();\n  }, [client, isConnected]);\n\n  return { client, device, isConnected };\n}\n","import * as uuid from \"uuid\";\n\nexport default function getClientId() {\n  let id = localStorage.getItem(\"clientId\");\n  if (id) return id;\n\n  id = uuid.v4();\n  localStorage.setItem(\"clientId\", id);\n  return id;\n}\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ConnectAToy, useVibration } from \"react-buttplug\";\n\nimport getClientId from \"../../getClientId\";\nimport {\n  selectMe,\n  join,\n  clientDisconnected,\n  clientDeviceState,\n} from \"./shareSlice\";\n\nexport default function Me() {\n  const me = useSelector(selectMe);\n  if (!me) return <NewMe />;\n\n  return <ConnectedMe me={me} />;\n}\n\nfunction ConnectedMe({ me }) {\n  const { id, name, hasDevice, intensity } = me;\n  const dispatch = useDispatch();\n  const device = useRef(null);\n\n  const newDevice = useCallback(\n    (d) => {\n      device.current = d;\n      dispatch(clientDeviceState({ id, hasDevice: true }));\n    },\n    [id, dispatch]\n  );\n  useVibration(device.current, intensity);\n\n  useEffect(() => {\n    return () => dispatch(clientDisconnected(id));\n  }, [dispatch, id]);\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      {!hasDevice && (\n        <ConnectAToy\n          render={({ initiateConnection }) => (\n            <button onClick={initiateConnection}>Make it Interesting</button>\n          )}\n          onNewDevice={newDevice}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction NewMe() {\n  const [name, setName] = useState(\"\");\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <button onClick={() => dispatch(join({ id: getClientId(), name }))}>\n        Join\n      </button>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useVibrate(device, level) {\n  useEffect(() => {\n    if (!device) return;\n\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      await device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${level}`);\n    if (level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [device, level]);\n\n  return null;\n}\n","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport Others from \"./Others\";\r\nimport Me from \"./Me\";\r\nimport { newSession, initFromServer } from \"./shareSlice\";\r\n\r\nexport function Share() {\r\n  const { group } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(newSession(group));\r\n    dispatch(initFromServer());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Me />\r\n      <Others />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Share } from \"./features/share/Share\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/:group\" component={Share} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSocketIoMiddleware from \"redux-socket.io\";\r\nimport io from \"socket.io-client\";\r\nimport shareReducer from \"../features/share/shareSlice\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nlet socket = io(API_URL);\r\nlet socketIoMiddleware = createSocketIoMiddleware(socket, \"share/client\");\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    share: shareReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(socketIoMiddleware),\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}