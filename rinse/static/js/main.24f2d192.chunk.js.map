{"version":3,"sources":["NewDrain.js","../../src/ConnectAToy.js","../../src/useButtPlug.js","features/twitterStats/twitterStatsSlice.js","MoneyMoney.js","../../src/useVibration.js","CountdownTimer.js","features/twitterStats/TwitterStats.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["NewDrain","useImmer","conversationId","currency","perLike","perComment","perRetweet","until","DateTime","local","plus","hours","drain","updateDetails","useState","url","setUrl","areDetailsComplete","Object","values","every","v","Boolean","update","key","value","target","draft","htmlFor","id","type","onChange","e","toJSDate","fromJSDate","formatStyle","locale","okLabel","cancelLabel","onClick","process","toMillis","disabled","href","ConnectAToy","onNewDevice","ready","useEffect","newClient","device","setDevice","setIsConnected","setClient","client","a","connector","console","start","useButtPlug","isReady","render","initiateConnection","setReady","twitterStatsSlice","createSlice","name","initialState","isHydrated","error","likes","comments","retweets","reducers","apiDataReceived","state","payload","apiError","actions","updateFromAPI","dispatch","fetch","response","ok","json","data","message","selectLikes","twitterStats","selectComments","selectRetweets","MoneyMoney","props","level","cashMoneySpec","amountOwed","progressOnThisHundred","d3","clamp","domain","range","scale","vibrationFor","startVibrate","stopVibrate","CountdownTimer","timeLeft","setTimeLeft","callback","requestRef","React","useRef","previousTimeRef","animate","useCallback","time","undefined","current","deltaTime","requestAnimationFrame","log","cancelAnimationFrame","useAnimationFrame","untilMillis","duration","Interval","fromDateTimes","fromMillis","toDuration","toObject","seconds","Math","floor","days","minutes","infl","unit","amt","str","calculateTimeLeft","TwitterStats","useParams","useSelector","useDispatch","useInterval","Number","App","path","component","configureStore","reducer","twitterStatsReducer","window","location","hostname","match","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.24f2d192.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { DateTime } from \"luxon\";\nimport { DateTimePicker } from \"react-rainbow-components\";\n\nconst URL_BASE = process.env.PUBLIC_URL;\n\nexport default function NewDrain() {\n  const [drain, updateDetails] = useImmer({\n    conversationId: \"\",\n    currency: \"$\",\n    perLike: \"5\",\n    perComment: \"5\",\n    perRetweet: \"5\",\n    until: DateTime.local().plus({ hours: 1 }),\n  });\n  const [url, setUrl] = useState(null);\n\n  const areDetailsComplete = Object.values(drain).every((v) => Boolean(v));\n  const urlFromDetails = () =>\n    `${URL_BASE}/drain/${drain.conversationId}/${drain.currency}/${\n      drain.perLike\n    }/${drain.perComment}/${drain.perRetweet}/${drain.until.toMillis()}`;\n\n  const update = ({ target: { value } }, key) =>\n    updateDetails((draft) => {\n      draft[key] = value;\n    });\n\n  const onGenerate = () => setUrl(urlFromDetails());\n\n  return (\n    <main>\n      <div>\n        <label htmlFor=\"conversationId\">Conversation ID: </label>\n        <input\n          id=\"conversationId\"\n          type=\"text\"\n          onChange={(e) => update(e, \"conversationId\")}\n          value={drain.conversationId}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"currency\">Currency: </label>\n        <input\n          type=\"text\"\n          onChange={(e) => update(e, \"currency\")}\n          value={drain.currency}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"perLike\">{drain.currency} per Like: </label>\n        <input\n          type=\"text\"\n          onChange={(e) => update(e, \"perLike\")}\n          value={drain.perLike}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"perComment\">{drain.currency} per Comment: </label>\n        <input\n          type=\"text\"\n          onChange={(e) => update(e, \"perComment\")}\n          value={drain.perComment}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"perRetweet\">{drain.currency} per Retweet: </label>\n        <input\n          type=\"text\"\n          onChange={(e) => update(e, \"perRetweet\")}\n          value={drain.perRetweet}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"until\">Until: </label>\n        <DateTimePicker\n          id=\"until\"\n          value={drain.until.toJSDate()}\n          onChange={(value) =>\n            updateDetails((draft) => {\n              draft.until = DateTime.fromJSDate(value);\n            })\n          }\n          formatStyle=\"large\"\n          locale=\"en-US\"\n          okLabel=\"OK\"\n          cancelLabel=\"Cancel\"\n        />\n      </div>\n      <div>\n        <button onClick={onGenerate} disabled={!areDetailsComplete}>\n          Drain Them\n        </button>\n      </div>\n      <div>{url && <a href={url}>{url}</a>}</div>\n    </main>\n  );\n}\n","import { useState } from \"react\";\nimport useButtPlug from \"./useButtPlug\";\n\nexport default function ConnectAToy({ render, onNewDevice }) {\n  const [isReady, setReady] = useState(false);\n\n  useButtPlug(isReady, onNewDevice);\n\n  if (!isReady) return render({ initiateConnection: () => setReady(true) });\n  return null;\n}\n","import { useState, useEffect } from \"react\";\nimport { ButtplugClient, ButtplugEmbeddedClientConnector } from \"buttplug\";\n\nexport default function useButtPlug(ready, onNewDevice) {\n  const [client, setClient] = useState(null);\n  const [device, setDevice] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    if (!ready || client) return;\n\n    const newClient = new ButtplugClient(\"Cammy\");\n    newClient.addListener(\"deviceadded\", (device) => {\n      setDevice(device);\n      setIsConnected(true);\n      onNewDevice(device);\n    });\n\n    setClient(newClient);\n  }, [ready, onNewDevice, client, device, isConnected]);\n\n  useEffect(() => {\n    if (!client || isConnected) return;\n\n    async function start() {\n      try {\n        const connector = new ButtplugEmbeddedClientConnector();\n        await client.Connect(connector);\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n      await client.StartScanning();\n    }\n    start();\n  }, [client, isConnected]);\n\n  return { client, device, isConnected };\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst URL_BASE = process.env.REACT_APP_API_BASE_URL;\r\nexport const twitterStatsSlice = createSlice({\r\n  name: \"twitterStats\",\r\n  initialState: {\r\n    isHydrated: false,\r\n    error: null,\r\n    likes: null,\r\n    comments: null,\r\n    retweets: null,\r\n  },\r\n  reducers: {\r\n    apiDataReceived: (state, { payload }) => {\r\n      state.isHydrated = true;\r\n      state.likes = payload.likes;\r\n      state.comments = payload.comments;\r\n      state.retweets = payload.retweets;\r\n    },\r\n    apiError: (state, { payload }) => {\r\n      state = {\r\n        isHydrated: false,\r\n        error: payload,\r\n        likes: null,\r\n        comments: null,\r\n        retweets: null,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nconst { apiDataReceived, apiError } = twitterStatsSlice.actions;\r\n\r\nexport const updateFromAPI = (conversationId) => async (dispatch) => {\r\n  const url = `${URL_BASE}/twitter-stats-mock/${conversationId}`;\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) return dispatch(apiError);\r\n    const data = await response.json();\r\n    dispatch(apiDataReceived(data));\r\n  } catch (e) {\r\n    dispatch(apiError(e.message));\r\n  }\r\n};\r\n\r\nexport const selectLikes = (state) => state.twitterStats.likes;\r\nexport const selectComments = (state) => state.twitterStats.comments;\r\nexport const selectRetweets = (state) => state.twitterStats.retweets;\r\n\r\nexport default twitterStatsSlice.reducer;\r\n","import React from \"react\";\nimport { useVibration } from \"react-buttplug\";\nimport * as d3 from \"d3-scale\";\n\nconst vibrationFor = (amountOwed) => {\n  const progressOnThisHundred = amountOwed % 100;\n  const scale = d3.scaleLinear().clamp(true).domain([0, 100]).range([0, 1]);\n  return scale(progressOnThisHundred);\n};\n\nexport default function MoneyMoney(props) {\n  const { likes, comments, retweets, cashMoneySpec } = props;\n\n  const amountOwed =\n    likes * cashMoneySpec.perLike +\n    comments * cashMoneySpec.perComment +\n    retweets * cashMoneySpec.perRetweet;\n\n  useVibration(props.device, vibrationFor(amountOwed));\n\n  return (\n    <h1>\n      {cashMoneySpec.currency}\n      {amountOwed}\n    </h1>\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useVibrate(device, level) {\n  useEffect(() => {\n    if (!device) return;\n\n    async function startVibrate() {\n      console.log(\"startVibrate()\");\n      await device.SendVibrateCmd(level);\n      console.log(\"startVibrate() over\");\n    }\n\n    async function stopVibrate() {\n      console.log(\"stopVibrate()\");\n      await device.SendStopDeviceCmd();\n      console.log(\"stopVibrate() over\");\n    }\n\n    console.log(`vibrateEffect: ${level}`);\n    if (level > 0) {\n      startVibrate();\n    } else {\n      stopVibrate();\n    }\n  }, [device, level]);\n\n  return null;\n}\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { DateTime, Interval } from \"luxon\";\n\nconst useAnimationFrame = (callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = useCallback(\n    (time) => {\n      if (previousTimeRef.current !== undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime);\n      }\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    },\n    [callback]\n  );\n\n  useEffect(() => {\n    console.log(\"running the effect\");\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [animate]); // Make sure the effect runs only once\n};\n\nfunction calculateTimeLeft(untilMillis) {\n  const interval = Interval.fromDateTimes(\n    DateTime.local(),\n    DateTime.fromMillis(untilMillis)\n  );\n  const duration = interval\n    .toDuration([\"days\", \"hours\", \"minutes\", \"seconds\"])\n    .toObject();\n  duration.seconds = Math.floor(duration.seconds);\n  const { days, hours, minutes, seconds } = duration;\n\n  const infl = (unit, amt) => (amt > 1 ? `${unit}s` : unit);\n\n  let str = \"\";\n  if (days) str += `${days} ${infl(\"day\", days)}`;\n  if (days && (hours || minutes || seconds)) str += \", \";\n  if (hours) str += `${hours} ${infl(\"hour\", hours)}`;\n  if (hours && (minutes || seconds)) str += \", \";\n  if (minutes) str += `${minutes} ${infl(\"minute\", minutes)}`;\n  if (minutes && seconds) str += \", \";\n  if (seconds) str += `${Math.floor(seconds)} ${infl(\"second\", seconds)}`;\n  return str;\n}\n\nexport default function CountdownTimer({ until }) {\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  const counterCallback = useCallback(\n    (deltaTime) => {\n      setTimeLeft(calculateTimeLeft(until));\n    },\n    [until]\n  );\n\n  useAnimationFrame(counterCallback);\n\n  return <h1>Time left: {timeLeft}</h1>;\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport useInterval from \"react-useinterval\";\r\nimport { ConnectAToy } from \"react-buttplug\";\r\n\r\nimport {\r\n  updateFromAPI,\r\n  selectLikes,\r\n  selectComments,\r\n  selectRetweets,\r\n} from \"./twitterStatsSlice\";\r\nimport MoneyMoney from \"../../MoneyMoney\";\r\nimport CountdownTimer from \"../../CountdownTimer\";\r\n\r\nconst UPDATE_INTERVAL = 3 * 1000;\r\n\r\nexport function TwitterStats() {\r\n  const { conversationId, until, ...cashMoneySpec } = useParams();\r\n\r\n  // TODO bug: initial state of 0/0/0 displays as -\r\n  const likes = useSelector(selectLikes);\r\n  const comments = useSelector(selectComments);\r\n  const retweets = useSelector(selectRetweets);\r\n  const dispatch = useDispatch();\r\n\r\n  const [device, setDevice] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateFromAPI(conversationId));\r\n  }, [conversationId, dispatch]);\r\n\r\n  useInterval(() => {\r\n    dispatch(updateFromAPI(conversationId));\r\n  }, UPDATE_INTERVAL);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Likes: {likes || \"-\"}</h1>\r\n      <h1>Comments: {comments || \"-\"}</h1>\r\n      <h1>Retweets: {retweets || \"-\"}</h1>\r\n      <MoneyMoney\r\n        device={device}\r\n        likes={likes}\r\n        comments={comments}\r\n        retweets={retweets}\r\n        cashMoneySpec={cashMoneySpec}\r\n      />\r\n      {until && <CountdownTimer until={Number(until)} />}\r\n      <ConnectAToy\r\n        render={({ initiateConnection }) => (\r\n          <button onClick={initiateConnection}>Make it Interesting</button>\r\n        )}\r\n        onNewDevice={setDevice}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport NewDrain from \"./NewDrain\";\r\nimport { TwitterStats } from \"./features/twitterStats/TwitterStats\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/new\" component={NewDrain} />\r\n      <Route\r\n        path=\"/:conversationId/:currency/:perLike/:perComment/:perRetweet/:until\"\r\n        component={TwitterStats}\r\n      />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport twitterStatsReducer from \"../features/twitterStats/twitterStatsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    twitterStats: twitterStatsReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}